{"version":3,"sources":["components/app.js","serviceWorker.js","index.js"],"names":["shuffle","array","i","length","j","Math","floor","random","temp","dst","type","names","tasks","answers","ct","push","task","name","rndDist","c","ceil","seqDist","App","state","checkboxes","addNumbers","label","value","distributionType","error","results","handleChange","event","_this","setState","Object","defineProperty","target","handleCheck","props","console","log","handleShuffle","items","split","join","handleDistribute","_this$state","relation","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","_this2","this","classes","_this$state2","checkboxNames","keys","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","Grid_default","container","item","xs","TextField_default","fullWidth","multiline","rows","margin","onChange","Button_default","button","onClick","FormControl_default","component","FormLabel_default","RadioGroup_default","aria-label","FormControlLabel_default","control","Radio_default","disabled","style","padding","paddingLeft","formControl","FormGroup_default","map","id","key","Checkbox_default","checked","Table_default","table","TableHead_default","TableRow_default","TableCell_default","TableBody_default","scope","marginTop","answer","Component","withStyles","width","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f8d1018.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst styles = {\n  button: {\n    width: '100%',\n    marginBottom: 10,\n  },\n  container: {\n    padding: 20,\n  }\n};\n\nfunction shuffle (array) {\n  for(let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nfunction rndDist(names, tasks, answers, ct) {\n  for (let i = 0; i < Math.floor(tasks.length/names.length); i++) {\n    names = shuffle(names);\n    for (let j = 0; j < names.length; j++) {\n      answers.push({task: tasks[i*names.length+j], name: names[j]});\n      ct[names[j]].push(i*names.length+j+1);\n    }\n  }\n  names = shuffle(names);\n  for (let i = Math.floor(tasks.length/names.length)*names.length; i < tasks.length; i++){\n    answers.push({task: tasks[i], name: names[i%names.length]});\n    ct[names[i%names.length]].push(i+1);\n  }\n}\n\nfunction seqDist(names, tasks, answers, ct) {\n  let c = 0;\n  for (let i = 0; i < names.length; i++) {\n    for (let j = 0; j < Math.ceil(tasks.length/names.length) - ( (i < tasks.length % names.length) || (tasks.length % names.length === 0) ? 0 : 1); j++){\n      answers.push({task: tasks[c], name: names[i]});\n      c++;\n      ct[names[i]].push(c);\n    }\n  }\n}\n\nfunction massDist () {\n\n}\n\nfunction dst(type, names, tasks, answers, ct) {\n  switch(type) {\n  case 'random':\n    return rndDist(names, tasks, answers, ct);\n  case 'sequential':\n    return seqDist(names, tasks, answers, ct);\n  case 'weight':\n    return massDist(names, tasks, answers, ct);\n  default:\n    return -1;\n  }\n}\n\nclass App extends Component {\n\n  state = {\n    checkboxes: {\n      addNumbers: {\n        label: 'Add task numbers',\n        value: true,\n      },\n    },\n    names: '',\n    tasks: '',\n    distributionType: 'random',\n    error: false,\n    results: false\n  };\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  }\n\n  handleCheck = name => (event, value) => {\n    this.setState((state, props) => {\n      state.checkboxes[name].value = value;\n      console.log(state.checkboxes);\n      return state;\n    });\n  }\n\n  handleShuffle = name => event => {\n    this.setState((state, props) => {\n      let items = state[name].split('\\n');\n      state[name] = shuffle(items).join('\\n');\n      return state;\n    });\n  }\n\n  handleDistribute = event => {\n    let { names, tasks, distributionType } = this.state,\n      answers = [],\n      relation = {};// name - task[]\n    names = names.split('\\n');\n    tasks = tasks.split('\\n');\n    for (let name of names)\n      relation[name] = [];\n    if (names.length < 2 || tasks.length < 2) {\n      this.setState({ error: true });\n      return;\n    }\n    dst(distributionType, names, tasks, answers, relation);\n    this.setState({\n      error: false,\n      results: { names, answers, relation }\n    });\n  }\n\n  render() {\n    let { classes } = this.props,\n      { error, results, checkboxes } = this.state,\n      addNumbers = checkboxes.addNumbers.value,\n      checkboxNames = Object.keys(checkboxes);\n\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Great random\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <TextField\n                fullWidth\n                label=\"Members\"\n                value={this.state.names}\n                multiline\n                rows=\"28\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                onChange={this.handleChange('names')}\n              />\n            </div>\n          </Grid>\n          <Grid item xs={9}>\n            <div className={classes.container}>\n              <TextField\n                fullWidth\n                label=\"Tasks\"\n                value={this.state.tasks}\n                multiline\n                rows=\"28\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                onChange={this.handleChange('tasks')}\n              />\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <Button color=\"primary\" className={classes.button} onClick={this.handleDistribute} variant=\"outlined\">\n                Distribute\n              </Button>\n              <Button className={classes.button} onClick={this.handleShuffle('names')} variant=\"outlined\">\n                Shuffle members\n              </Button>\n              <Button className={classes.button} onClick={this.handleShuffle('tasks')} variant=\"outlined\">\n                Shuffle tasks\n              </Button>\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Distribution type</FormLabel>\n                <RadioGroup\n                  aria-label=\"DistributionType\"\n                  name=\"distributionType\"\n                  value={this.state.distributionType}\n                  onChange={this.handleChange('distributionType')}\n                >\n                  <FormControlLabel value=\"random\" control={<Radio color=\"primary\"/>} label=\"Random\" />\n                  <FormControlLabel value=\"sequential\" control={<Radio color=\"primary\"/>} label=\"Sequential\" />\n                  <FormControlLabel value=\"weight\" control={<Radio color=\"primary\"/>} label=\"Weight\" disabled/>\n                </RadioGroup>\n              </FormControl>\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Parameters</FormLabel>\n                <Typography variant=\"body1\" style={{ padding: 12, paddingLeft: 0 }}>\n                  No parameters\n                </Typography>\n              </FormControl>\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <FormControl component=\"fieldset\" className={classes.formControl}>\n                <FormLabel component=\"legend\">Options:</FormLabel>\n                <FormGroup>\n                  {checkboxNames.map((name, id) => (\n                    <FormControlLabel key={id}\n                      control={\n                        <Checkbox checked={checkboxes[name].value} onChange={this.handleCheck(name)} value={name} color=\"primary\" />\n                      }\n                      label={checkboxes[name].label}\n                    />\n                  ))}\n                </FormGroup>\n              </FormControl>\n            </div>\n          </Grid>\n          {error &&<Grid item xs={12}>\n            <div className={classes.container}>\n              <Typography variant=\"h6\" color=\"inherit\">\n                Error\n              </Typography>\n            </div>\n          </Grid>}\n          {results && <Grid item xs={12}>\n            <div className={classes.container}>\n              <Typography variant=\"h6\" color=\"inherit\">Short</Typography>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Member</TableCell>\n                    <TableCell>Tasks</TableCell>\n                    <TableCell>Count</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {results.names.map((name, id) =>(\n                    <TableRow key={id}>\n                      <TableCell component=\"th\" scope=\"row\">{name}</TableCell>\n                      <TableCell>{results.relation[name].join(', ')}</TableCell>\n                      <TableCell>{results.relation[name].length}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              <Typography variant=\"h6\" color=\"inherit\" style={{ marginTop: 20 }}>Details</Typography>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    {addNumbers && <TableCell>Number</TableCell>}\n                    <TableCell>Task</TableCell>\n                    <TableCell>Member</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {results.answers.map((answer, id) =>(\n                    <TableRow key={id}>\n                      {addNumbers && <TableCell>{id + 1}</TableCell>}\n                      <TableCell>{answer.task}</TableCell>\n                      <TableCell>{answer.name}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </Grid>}\n        </Grid>\n      </div>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}