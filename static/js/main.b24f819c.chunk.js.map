{"version":3,"sources":["components/app/App.js","serviceWorker.js","index.js"],"names":["shuffle","array","i","length","j","Math","floor","random","temp","dst","type","names","tasks","answers","ct","push","task","name","rndDist","c","ceil","seqDist","App","state","checkboxes","addNumbers","label","value","shuffleNames","shuffleTasks","distributionType","error","results","handleChange","event","_this","setState","Object","defineProperty","target","handleCheck","props","console","log","handleShuffle","items","split","join","handleDistribute","_this$state","relation","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","_this2","this","classes","_this$state2","checkboxNames","keys","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","Grid_default","container","spacing","item","xs","TextField_default","fullWidth","multiline","rows","margin","onChange","Button_default","button","onClick","FormControl_default","component","formControl","FormLabel_default","FormGroup_default","map","id","FormControlLabel_default","key","control","Checkbox_default","checked","RadioGroup_default","aria-label","Radio_default","disabled","Table_default","table","TableHead_default","TableRow_default","TableCell_default","TableBody_default","scope","answer","Component","withStyles","width","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b24f819c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst styles = {\n  button: {\n    width: '100%',\n  },\n  container: {\n    margin: 10,\n  }\n};\n\nfunction shuffle (array) {\n  for(let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nfunction rndDist(names, tasks, answers, ct) {\n  for (let i = 0; i < Math.floor(tasks.length/names.length); i++) {\n    names = shuffle(names);\n    for (let j = 0; j < names.length; j++) {\n      answers.push({task: tasks[i*names.length+j], name: names[j]});\n      ct[names[j]].push(i*names.length+j+1);\n    }\n  }\n  names = shuffle(names);\n  for (let i = Math.floor(tasks.length/names.length)*names.length; i < tasks.length; i++){\n    answers.push({task: tasks[i], name: names[i%names.length]});\n    ct[names[i%names.length]].push(i+1);\n  }\n}\n\nfunction seqDist(names, tasks, answers, ct) {\n  let c = 0;\n  for (let i = 0; i < names.length; i++) {\n    for (let j = 0; j < Math.ceil(tasks.length/names.length) - ( (i < tasks.length % names.length) || (tasks.length % names.length === 0) ? 0 : 1); j++){\n      answers.push({task: tasks[c], name: names[i]});\n      c++;\n      ct[names[i]].push(c);\n    }\n  }\n}\n\nfunction massDist () {\n\n}\n\nfunction dst(type, names, tasks, answers, ct) {\n  switch(type) {\n  case 'random':\n    return rndDist(names, tasks, answers, ct);\n  case 'sequential':\n    return seqDist(names, tasks, answers, ct);\n  case 'weight':\n    return massDist(names, tasks, answers, ct);\n  default:\n    return -1;\n  }\n}\n\nclass App extends Component {\n\n  state = {\n    checkboxes: {\n      addNumbers: {\n        label: 'Добавлять номера заданий',\n        value: true,\n      },\n      shuffleNames: {\n        label: 'Перемешать имена',\n        value: true,\n      },\n      shuffleTasks: {\n        label: 'Перемешать задания',\n        value: false,\n      },\n    },\n    names: '',\n    tasks: '',\n    distributionType: 'random',\n    error: false,\n    results: false\n  };\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  }\n\n  handleCheck = name => (event, value) => {\n    this.setState((state, props) => {\n      state.checkboxes[name].value = value;\n      console.log(state.checkboxes);\n      return state;\n    });\n  }\n\n  handleShuffle = name => event => {\n    this.setState((state, props) => {\n      let items = state[name].split('\\n');\n      state[name] = shuffle(items).join('\\n');\n      return state;\n    });\n  }\n\n  handleDistribute = event => {\n    let { names, tasks, checkboxes, distributionType } = this.state,\n      { shuffleNames, shuffleTasks } = checkboxes,\n      answers = [],\n      relation = {};// name - task[]\n    names = names.split('\\n');\n    tasks = tasks.split('\\n');\n    if (shuffleNames.value)\n      names = shuffle(names);\n    if (shuffleTasks.value)\n      tasks = shuffle(tasks);\n    for (let name of names)\n      relation[name] = [];\n    if (names.length < 2 || tasks.length < 2) {\n      this.setState({ error: true });\n      return;\n    }\n    dst(distributionType, names, tasks, answers, relation);\n    this.setState({\n      error: false,\n      results: { names, answers, relation }\n    });\n  }\n\n  render() {\n    let { classes } = this.props,\n      { error, results, checkboxes } = this.state,\n      addNumbers = checkboxes.addNumbers.value,\n      checkboxNames = Object.keys(checkboxes);\n\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Великий Рандом\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container spacing={0}>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <TextField\n                fullWidth\n                label=\"Исполнители\"\n                value={this.state.names}\n                multiline\n                rows=\"30\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                onChange={this.handleChange('names')}\n              />\n            </div>\n          </Grid>\n          <Grid item xs={9}>\n            <div className={classes.container}>\n              <TextField\n                fullWidth\n                label=\"Задачи\"\n                value={this.state.tasks}\n                multiline\n                rows=\"30\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                onChange={this.handleChange('tasks')}\n              />\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <Button color=\"primary\" className={classes.button} onClick={this.handleDistribute}>\n                Распределить\n              </Button>\n              <Button className={classes.button} onClick={this.handleShuffle('names')}>\n                Перемешать имена\n              </Button>\n              <Button className={classes.button} onClick={this.handleShuffle('tasks')}>\n                Перемешать задания\n              </Button>\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n              <FormLabel component=\"legend\">Опции:</FormLabel>\n              <FormGroup>\n                {checkboxNames.map((name, id) => (\n                  <FormControlLabel key={id}\n                    control={\n                      <Checkbox checked={checkboxes[name].value} onChange={this.handleCheck(name)} value={name} color=\"primary\" />\n                    }\n                    label={checkboxes[name].label}\n                  />\n                ))}\n              </FormGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Распределение</FormLabel>\n                <RadioGroup\n                  aria-label=\"DistributionType\"\n                  name=\"distributionType\"\n                  value={this.state.distributionType}\n                  onChange={this.handleChange('distributionType')}\n                >\n                  <FormControlLabel value=\"random\" control={<Radio color=\"primary\"/>} label=\"Случайное\" />\n                  <FormControlLabel value=\"sequential\" control={<Radio color=\"primary\"/>} label=\"Последовательное\" />\n                  <FormControlLabel value=\"weight\" control={<Radio color=\"primary\"/>} label=\"Весовое\" disabled/>\n                </RadioGroup>\n              </FormControl>\n            </div>\n          </Grid>\n          <Grid item xs={3}>\n            <div className={classes.container}>\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Параметры</FormLabel>\n                Нет параметров\n              </FormControl>\n            </div>\n          </Grid>\n          {error &&<Grid item xs={12}>\n            <div className={classes.container}>\n              <Typography variant=\"h6\" color=\"inherit\">\n                Ошибка\n              </Typography>\n            </div>\n          </Grid>}\n          {results && <Grid item xs={12}>\n            <div className={classes.container}>\n              <Typography variant=\"h6\" color=\"inherit\">Кратко</Typography>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Исполнитель</TableCell>\n                    <TableCell>Задания</TableCell>\n                    <TableCell>Количество</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {results.names.map((name, id) =>(\n                    <TableRow key={id}>\n                      <TableCell component=\"th\" scope=\"row\">{name}</TableCell>\n                      <TableCell>{results.relation[name].join(', ')}</TableCell>\n                      <TableCell>{results.relation[name].length}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              <Typography variant=\"h6\" color=\"inherit\">Подробно</Typography>\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    {addNumbers && <TableCell>Номер</TableCell>}\n                    <TableCell>Задание</TableCell>\n                    <TableCell>Исполнитель</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {results.answers.map((answer, id) =>(\n                    <TableRow key={id}>\n                      {addNumbers && <TableCell>{id + 1}</TableCell>}\n                      <TableCell>{answer.task}</TableCell>\n                      <TableCell>{answer.name}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </Grid>}\n        </Grid>\n      </div>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}